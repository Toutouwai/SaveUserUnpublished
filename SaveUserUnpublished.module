<?php namespace ProcessWire;

/**
 * Allow saving users in unpublished state in ProcessWire
 *
 * Forked from BitPoet's module by Robin S
 */

class SaveUserUnpublished extends Wire implements Module {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			"title"			=>	__("Save User Unpublished", __FILE__),
			"summary"		=>	__("Allow saving users in unpublished state", __FILE__),
			"version"		=>	"0.1.1",
			"autoload"		=>	true
		);
	}

	/**
	 * Init
	 */
	public function init() {
		$this->addHookAfter("ProcessPageEdit::buildForm", $this, "addSaveUnpublishedButton");
		$this->addHookBefore('ProcessUser::executeEdit', $this, 'beforeProcessUserEdit');
	}

	/**
	 * Add a button and checkbox for saving users with unpublished status
	 *
	 * @param HookEvent $event
	 */
	public function addSaveUnpublishedButton(HookEvent $event) {
		$page = $event->page;
		$form = $event->return;
		
		$id = (int) $this->input->post('id');
		if(! $id) $id = (int) $this->input->get('id');
		
		if(! $id) return;
		
		if($page->process == "ProcessUser") {

			$editpage = $this->pages->get($id);

			if( $editpage instanceof NullPage ) return;
			
			$this->editPage = $editpage;

			if($editpage->hasStatus(Page::statusUnpublished)) {
				// Add button to save and keep unpublished
				$pubbtn = $form->getChildByName('submit_publish');
				if($pubbtn) {
					
					$submit2 = $this->modules->get('InputfieldSubmit');
					$submit2->attr('name', 'submit_save');
					$submit2->attr('id', 'submit_save_unpublished');
					$submit2->class .= ' ui-priority-secondary head_button_clone';
					$submit2->attr('value', $this->_("Save + Keep Unpublished")); // Button: save unpublished
					
					$form->insertAfter($submit2, $pubbtn);
				}

				$roles = $form->getChildByName("roles");
				if($roles) {
					$f = $this->modules->get("InputfieldMarkup");
					$f->attr('name', 'statusunpublished');
					$f->attr('value', $this->_('User is not published'));
					$roles->parent->insertAfter($f, $roles);
				}
				
			} else {
				// Add checkbox to unpublish
				$roles = $form->getChildByName("roles");
				if($roles) {
					
					$f = $this->modules->get("InputfieldCheckbox");
					$f->attr('id+name', 'unpublishuser');
					$f->label = $f->title = $this->_("Unpublish User");
					
					$form->insertAfter($f, $roles);
				}
			}

		}
		
		$event->return = $form;
	}

	/**
	 * Make password inputfield not required and collapsed for unpublished users
	 */
	public function beforeProcessUserEdit() {

		// Get the user being edited
		$user = $this->users->get((int) $this->input->id);
		// Early return if no password has been set (i.e. new user)
		if(!$user->pass->hash) return;

		// Password inputfield not required
		$this->addHookBefore('Field(name=pass)::getInputfield', function(HookEvent $event) {
			$field = $event->object;
			$field->required = false;
		});

		// Add script to collapse password inputfield
		$this->addHookAfter('ProcessPageEdit::execute', function(HookEvent $event) {
			$out = $event->return;
			$out .= "
		<script>
		$(function(){
			$('.InputfieldPassword').addClass('collapsed1 InputfieldStateCollapsed');
		});
		</script>
		";
			$event->return = $out;
		});

	}

}
